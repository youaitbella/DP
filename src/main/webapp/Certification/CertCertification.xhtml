<?xml version='1.0' encoding='UTF-8' ?>
<!DOCTYPE composition PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<ui:composition xmlns:ui="http://java.sun.com/jsf/facelets"
                template="Cert.xhtml"
                xmlns:f="http://java.sun.com/jsf/core"
                xmlns:h="http://java.sun.com/jsf/html"
                xmlns:c="http://java.sun.com/jsp/jstl/core"
                xmlns:p="http://xmlns.jcp.org/jsf/passthrough"
                xmlns:cb="http://inek.org/dataportal/clientbehaviour"
                xmlns:jsf="http://xmlns.jcp.org/jsf"
                >

    <ui:define name="editContent">
        <h:outputStylesheet name="fileuploader.css" library="css"/>
        <h:outputScript name="fileuploader.js" library="script" target="head"/>
        <h:form id="form" enctype="multipart/form-data" >

            <h:outputLabel for="mnuSystem" value="#{msg.lblSystem}:" styleClass="label15"/>
            <h:selectOneMenu id="mnuSystem" styleClass="input" value="#{certCertification.systemId}"
                             immediate="true" disabled="#{certCertification.grouperChanged}"
                             onchange="jsf.ajax.request(this, event, {render: 'form :logout:remaining'});">
                <f:selectItems value="#{certCertification.systems4Account}" var="system" itemLabel="#{system.label}" itemValue="#{system.value}"/>
            </h:selectOneMenu>

            <div id="systemData" jsf:rendered="#{certCertification.grouper.id ge 0}">

                <h2>#{msg.lblDownload}</h2>

                <div class="inputPart">
                    <h:commandLink styleClass="button" value="#{msg.btnDownloadSpec}" immediate="true"
                                   action="#{certCertification.downloadSpec}"/>
                    <h:outputLabel value="#{editCert.getSpecFileName(certCertification.systemId, false)}"/>
                </div>

                <div class="inputPart">
                    <h:commandLink styleClass="button" value="#{msg.btnDownloadTest}"  immediate="true"
                                   action="#{certCertification.downloadTest}"/>
                    <h:outputLabel value="#{editCert.getTestFileName(certCertification.systemId, false)}"/>
                </div>

                <div class="inputPart" jsf:rendered="#{certCertification.grouper.certStatus.status ge 20}">
                    <h:commandLink styleClass="button" value="#{msg.btnDownloadCert}"  immediate="true"
                                   action="#{certCertification.downloadCert}"/>
                    <h:outputLabel value="#{editCert.getCertFileName(certCertification.systemId, false)}"/>
                </div>

                <h2>#{msg.lblUpload}</h2>

                <div id="file-uploader" jsf:rendered="#{certCertification.grouper.certStatus eq 'PasswordRequested' or certCertification.grouper.certStatus eq 'TestFailed1' or certCertification.grouper.certStatus eq 'TestFailed2' or ((certCertification.grouper.certStatus eq 'TestSucceed' or certCertification.grouper.certStatus eq 'CertFailed1') and !empty certCertification.grouper.name)}">
                    <noscript>
                        <p>Please enable JavaScript to use file uploader.</p>
                        <!-- or put a simple form for upload here -->
                    </noscript>
                </div>
                <!-- next comes a hidden element to force a JSF conform refresh -->
                <h:commandLink id="refresh" style="display: none" action="#{certCertification.refresh}" value="refresh"/>

                <!--div class="inputPart" jsf:rendered="# {certCertification.grouper.certStatus eq 'PasswordRequested' or certCertification.grouper.certStatus eq 'TestFailed1' or certCertification.grouper.certStatus eq 'TestFailed2' or certCertification.grouper.certStatus eq 'TestSucceed' or certCertification.grouper.certStatus eq 'CertFailed1'}">
                    <input id="form:testResult" type="file" name="form:testResult" class="hide" title="Upload Testergebnisse"
                           onchange="uploadFile('form:testResult');
                                   jsf.ajax.request(this, event, {render: 'form :logout:remaining', delay: '1000'});" />
                    <h:outputLabel styleClass="button" value="# {msg.btnUpload} # {certCertification.expectedFileName}" onclick="clickElementById('form:testResult');"/>
                    <progress id="progressBar" style="visibility: hidden;" value="0" max="100"></progress>
                    <h:message id="msgTestResult" for="testResult" styleClass="errorMessage"/>
                </div-->


                <div class="inputPart">
                    <h:outputLabel value="#{certCertification.resultFileName}"/>
                    <h:outputLabel rendered="#{certCertification.grouper.certStatus eq 'TestUpload1' or certCertification.grouper.certStatus eq 'TestUpload2' or certCertification.grouper.certStatus eq 'TestUpload3' or certCertification.grouper.certStatus eq 'CertUpload1' or certCertification.grouper.certStatus eq 'CertUpload2'}"
                                   value=" #{msg.lblUnderTest}"/>
                </div>

                <div class="inputPart" jsf:rendered="#{certCertification.resultFileName.endsWith('[ungespeichert]')}">
                    <h:commandLink id="btnConfirmFile" styleClass="button" value="#{msg.btnSave}"
                                   actionListener="#{certCertification.saveOther}"
                                   immediate="true" disabled="false">
                        <f:ajax render="@form :logout:remaining"/>
                    </h:commandLink>
                </div>

                <h2>#{msg.lblOther}</h2>

                <div class="inputPart">
                    <h:outputLabel for="txtGrouperName" value="#{msg.lblGrouperName}:" styleClass="label15"/>
                    <h:inputText id="txtGrouperName"
                                 value="#{certCertification.grouper.name}"
                                 styleClass="input"
                                 required="true">
                        <f:ajax render="@this msgGrouperName :logout:remaining" listener="#{certCertification.grouperChangeListener}"/>
                    </h:inputText>
                    <h:message for="txtGrouperName" id="msgGrouperName" styleClass="errorMessage"/>
                </div>

                <div class="inputPart">
                    <h:outputLabel for="txtEmailCopy" value="#{msg.lblEmailCopy}:" styleClass="label15"/>
                    <h:inputText id="txtEmailCopy"
                                 value="#{certCertification.grouper.emailCopy}"
                                 styleClass="input">
                        <f:ajax render="@this msgEmailCopy :logout:remaining" listener="#{certCertification.grouperChangeListener}"/>
                    </h:inputText>
                    <h:message for="txtEmailCopy" id="msgEmailCopy" styleClass="errorMessage"/>
                </div>


                <div class="toolBar">
                    <h:commandLink id="btnSaveOther" styleClass="button" value="#{msg.btnSave}"
                                   actionListener="#{certCertification.saveOther}"
                                   immediate="true" disabled="false"/>
                </div>

            </div>
            <script jsf:rendered="#{certCertification.grouper.certStatus eq 'PasswordRequested' or certCertification.grouper.certStatus eq 'TestFailed1' or certCertification.grouper.certStatus eq 'TestFailed2' or ((certCertification.grouper.certStatus eq 'TestSucceed' or certCertification.grouper.certStatus eq 'CertFailed1') and !empty certCertification.grouper.name)}">
                var fileCounter = 0;
                function createUploader(act, loc) {
                    var uploader = new qq.FileUploader({element: document.getElementById('file-uploader'),
                        action: '/DataPortal/upload/CertUploadServlet',
                        debug: true,
                        allowedExtensions: [], //['zip', '7z', 'rar', 'gpg', 'pgp'],
                        onSubmit: function (id, fileName) {
                            fileCounter++;
                        },
                        onCancel: function (id, fileName) {
                            fileCounter--;
                            if (fileCounter == 0) {
                                //window.location = '/DataPortal/DropBox/DropBoxUpload.xhtml';
                            }
                        },
                        onComplete: function (id, fileName, responseJSON) {
                            fileCounter--;
                            if (fileCounter == 0) {
                                // To display the uploaded file, we need to refresh the page.
                                // Window location would force a non-JSF navigation, ignoring our existing conversation
                                //window.location = '/DataPortal/DropBox/DropBoxUpload.xhtml';
                                // Thus, let JS click an element to get a JSF refresh
                                document.getElementById('form:refresh').click();
                            }
                        },
                        template: '<div class="qq-uploader">' +
                                '<div class="qq-upload-drop-area"><span>Dateien mittels Ziehen und Ablegen hochladen.</span></div>' +
                                '<div class="qq-upload-button">#{msg.btnUpload} #{certCertification.expectedFileName}</div>' +
                                '<ul class="qq-upload-list"></ul>' +
                                '</div>'
                    });
                }
                createUploader();
            </script>
        </h:form>
        <script>
        </script>
    </ui:define>

</ui:composition>
